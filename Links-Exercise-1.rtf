{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww21800\viewh15920\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14667 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Build a Python script that implements the following functionality:
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0
\f2 \'a0$ python hyperlinks.py --url http://someurl.com --limit 1000 --out links.json
\f1\fs24 \
\

\f0\fs29\fsmilli14667 This will traverse the Web as a linked graph from the starting 
\f2 --url
\f1\fs24 \

\f0\fs29\fsmilli14667 finding all outgoing links (
\f2 <a>
\f0  tag): it will store each outgoing link
\f1\fs24 \

\f0\fs29\fsmilli14667 for the URL, and then repeat the process for each of them, until
\f1\fs24 \
\pard\pardeftab720\partightenfactor0

\f2\fs29\fsmilli14667 \cf0 --limit
\f0  URLs will have been traversed.
\f1\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14667 \cf0 The output will be a JSON file with the following information:
\f1\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf0 \{
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0'someurl.com': \{
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'incoming': [
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'further.com', ... list of URLs that link to someurl.com ...
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0],
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'outgoing': [
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'another.com', ... list of URLs linked from someurl.com ...
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0]
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\},
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0'another.com': \{
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'incoming': [
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'someurl.com', ... list of URLs that link to another.com ...
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0],
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'outgoing': [
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'further.com', ... list of URLs linked from another.com ...
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0]
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\},
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0'further.com': \{
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'incoming': [
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'another.com', ... list of URLs that link to another.com ...
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0],
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'outgoing': [
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0'someurl.com', ... list of URLs linked from another.com ...
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0]
\f1\fs24 \

\f2\fs26\fsmilli13333 \'a0\'a0\'a0\'a0\'a0\}
\f1\fs24 \

\f2\fs26\fsmilli13333 \}
\f1\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14667 \cf0 (this would be the output with 
\f2 --limit 3
\f0 ).
\f1\fs24 \
\

\f0\fs29\fsmilli14667 For efficiency, you *may* limit the number of `outgoing` URLs stored to only be up to 
\f2 --limit
\f0 , but this is optional.
\f1\fs24 \
\

\f0\fs29\fsmilli14667 If the subset of the Web traversed is sufficiently small, the `incoming` lists may all very well contain just the one link you just traversed (and the first one be empty): this is fine and should be expected.
\f1\fs24 \
\

\f0\fs29\fsmilli14667 It is also possible that we have selected an isolated subgraph of the Web, and that the traversal may terminate before we reach 
\f2 --limit
\f0  URLs: this is fine too (although somewhat unexpected).
\f1\fs24 \
\

\f0\fs29\fsmilli14667 In the absence of an 
\f2 --out
\f0  option, please output the JSON to stdout (bonus point for pretty printing); both 
\f2 --url
\f0  and 
\f2 --limit
\f0  are required.
\f1\fs24 \
\

\f0\fs29\fsmilli14667 NOTES:
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0- Please assume (naively) that all URLs point to HTML pages
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0- Bonus point for non-naive implementation
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0- Extra points for smart use of RegEx (this will also greatly simplify your code)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0- Extra bonus points if you can implement a 
\f2 --dbout 
\f0 flag
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0that causes the data to be stored in a MongoDB collection
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0(tip: using pymongo saves a lot of pain)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0- We expect to see a few unit tests implemented,
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0ideally using the `mock` framework, if you really want to impress us.
\f1\fs24 \
}